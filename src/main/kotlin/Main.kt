class Dog(
    // Создаём новый класс, в конструкторе класса будет 3 свойства.
    val name: String, // Имя
    weight_param: Int, // _param означает, что для этого свойства будет создан в дальнейшем set method.
    breed_param: String,
) {
    init { // Конструкция init позволяет нам выполнить действие без функций.
        print("Dog $name has been created. ") // Выводим на экран имя собаки.
    }

    var activities = arrayOf("Walks") // В свойствах мы можем указывать и массивы. В данном массиве пока 1 элемент.
    val breed = breed_param.uppercase() // Всякий раз порода собаки будет преобразовываться в надпись большими буквами.

    init {
        println("The breed is $breed.") // Выводим на экран породу собаки.
    }

    var weight = weight_param // Создаём переменную для обращения к свойству для создания set метода.
        set(value) { // set идёт строго под переменной, иначе set метод не создастся.
            if (value > 0) field = value  // Данный Set метод защищает свойство веса от значений меньше 0.
        }

    val weightInKgs: Double // Добавляем новое свойство в тело класса, которое будет считать вес в килограммах.
        get() = weight / 2.2

    fun bark() { // Также внутри класса мы можем создавать функции.
        println(if (weight < 20) "Yip!" else "Woof!") // Если вес собаки меньше 20, она будет пикать, если больше, то её лай будет громким.
    }
}


fun main() { // Создаём общую функцию.
    val myDog = Dog("Fido", 70, "Mixed") // Создаём объект для класса с соответствующими параметрами.
    myDog.bark() // Вызовем функцию и посмотрим на то, как гавкнет наша собака с нашими параметрами.

    myDog.weight = 75 // Зададим собаке новый вес.
    println("Weight in Kgs is ${myDog.weightInKgs}") // Через точку обращаемся к параметру класса, который переводит вес собаки в килограммы.

    myDog.weight =
        -2 // Пытаемся переназначить вес собаки на отрицательное значение и проверим, как отработает set метод.
    println("Weight is ${myDog.weight}") // Вес собаки по-прежнему будет 75 - это наше последнее назначение здесь.

    myDog.activities = arrayOf(
        "Walks",
        "Fetching balls",
        "Frisbee"
    ) // Обратимся к свойству activities и добавим в массив новые значения.
    for (item in myDog.activities) { // Цикл for поочерёдно переберёт все элементы массива
        println("My dog enjoys $item") // и по очереди распечатает их.
    }

    val dogs = arrayOf( // Мы также можем создать массив и добавить в него новых собак.
        Dog("Kelpie", 20, "Westie"), // Собака должна также иметь 3 параметра в соответствии с классом.
        Dog("Ripper", 10, "Poodle")
    )
    dogs[1].bark() // Обратимся к первой собаке и вызовем функцию гавканья.
    dogs[1].weight = 15 // Переназначим вес первой собаки.
    println("Weight for ${dogs[1].name} is ${dogs[1].weight}") // А потом выведем на экран имя и вес первой собаки.
}